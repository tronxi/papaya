fmod EXPRESSION is
    pr MEMORY .

    sort Expression .
    subsort Type < Expression .

    op _+_ : Expression Expression -> Expression [ctor assoc comm] .
    op _-_ : Expression Expression -> Expression [ctor] .
    op _*_ : Expression Expression -> Expression [ctor assoc comm] .
    op size(_) : Type -> Expression [ctor] .
    op get(_,_) : Expression Int -> Expression [ctor] .
    op remove(_,_) : Expression Int -> Expression [ctor] .
    op add(_,_) : Expression Type -> Expression [ctor] .
    op modify(_,_,_) : Expression Int Expression -> Expression [ctor] .
    
    vars T T' : Type .
    vars I I' : Int .
    vars F F' : Float .
    vars S S' : String .
    var M : Memory .
    var Q : Qid .
    vars E E' : Expression .
    var L : ListType .

    op eval : Memory Expression -> Type .
    eq eval (M, (intType I) + (intType I')) = (intType I + I') .
    eq eval (M, (intType I) - (intType I')) = (intType I - I') .
    eq eval (M, (intType I) * (intType I')) = (intType I * I') .

    eq eval (M, (floatType F) + (floatType F')) = (floatType F + F') .
    eq eval (M, (floatType F) - (floatType F')) = (floatType F - F') .
    eq eval (M, (floatType F) * (floatType F')) = (floatType F * F') .

    eq eval (M, (stringType S) + (stringType S')) = (stringType S + S') .

    eq eval (M, Q) = find(M, Q) .
    eq eval (M, T) = T .

    eq eval (M, E + E') = eval(M, eval(M, E) + eval(M, E')) .
    eq eval (M, E - E') = eval(M, eval(M, E) - eval(M, E')) .
    eq eval (M, E * E') = eval(M, eval(M, E) * eval(M, E')) .

    eq eval (M, size(listType L)) = (intType sizeList(L)) .
    eq eval (M, size(Q)) = (intType sizeAux(find(M, Q))) .

    eq eval (M, modify((listType L), I, E)) = (listType modifyElementList(L, eval(M,E), I, 0)) .
    eq eval (M, modify(Q, I, E)) = (listType modifyAux(M, find(M, Q), eval(M,E), I)) .
    eq eval (M, modify(E, I, E')) = eval(M, modify(eval(M, E), I, eval(M,E'))) .

    eq eval (M, get(listType L, I)) = elementList(L, I, 0) .
    eq eval (M, get(Q, I)) = elementListAux(find(M, Q), I) .
    eq eval (M, get(E, I)) = eval(M, get(eval(M,E), I)) .

    eq eval (M, remove(listType L, I)) = (listType removeElementList(L, I, 0)) .
    eq eval (M, remove(Q, I)) = (listType removeElementAux(find(M, Q), I)) .
    eq eval (M, remove(E, I)) = eval(M, remove(eval(M,E), I)) .

    eq eval (M, add(listType L , T)) = (listType L, T) .
    eq eval (M, add(Q, T)) = (listType addAux(find(M, Q), T)) .

    op removeElementAux : Type Int -> ListType .
    eq removeElementAux((listType L), I) = removeElementList(L, I, 0) .
    eq removeElementAux(T, I) = (intType 0) [owise] .

    op elementListAux : Type Int -> ListType .
    eq elementListAux((listType L), I) = elementList(L, I, 0) .
    eq elementListAux(T, I) = (intType 0) [owise] .

    op sizeAux : Type -> Int .
    eq sizeAux((listType L)) = sizeList(L) .
    eq sizeAux(T) = 0 [owise] .

    op addAux : Type Type -> ListType .
    eq addAux((listType L), T) = L, T .
    eq addAux(T, T') = (intType 0) [owise] .

    op modifyAux : Memory Type Type Int -> ListType .
    eq modifyAux(M, (listType L), T, I) = modifyElementList(L, T, I, 0) .
    eq modifyAux(M, T, T', I) = (intType 0) [owise] .

endfm